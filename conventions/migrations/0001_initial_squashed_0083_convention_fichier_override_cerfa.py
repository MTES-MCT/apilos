# Generated by Django 4.2.11 on 2024-04-17 16:12

import uuid

import django.contrib.postgres.operations
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# conventions.migrations.0011_auto_20211005_1719
# conventions.migrations.0013_convention_premiere_soumission_le
# conventions.migrations.0017_auto_20220401_1212
# conventions.migrations.0029_auto_20220718_1427
# conventions.migrations.0036_auto_20221006_0553
# conventions.migrations.0038_load_avenant_type
# conventions.migrations.0039_auto_20221013_0115
# conventions.migrations.0069_add_data_avenanttype
# conventions.migrations.0070_auto_20230725_1842
# conventions.migrations.0078_auto_20240115_1612


class Migration(migrations.Migration):

    atomic = False

    replaces = [
        ("conventions", "0001_initial"),
        ("conventions", "0002_initial"),
        ("conventions", "0003_auto_20210728_1536"),
        ("conventions", "0004_auto_20210823_1813"),
        ("conventions", "0005_auto_20210826_1154"),
        ("conventions", "0006_alter_pret_preteur"),
        ("conventions", "0007_auto_20210831_0908"),
        ("conventions", "0008_auto_20210831_1707"),
        ("conventions", "0009_convention_statut"),
        ("conventions", "0010_alter_pret_preteur"),
        ("conventions", "0011_auto_20211005_1719"),
        ("conventions", "0012_alter_pret_montant"),
        ("conventions", "0013_convention_premiere_soumission_le"),
        ("conventions", "0014_conventionhistory"),
        ("conventions", "0015_alter_pret_preteur"),
        ("conventions", "0016_auto_20220107_1209"),
        ("conventions", "0017_auto_20220401_1212"),
        ("conventions", "0018_convention_type1and2"),
        ("conventions", "0019_auto_20220418_1602"),
        ("conventions", "0020_alter_pret_preteur"),
        ("conventions", "0021_convention_donnees_validees"),
        ("conventions", "0022_convention_fichier_signe"),
        ("conventions", "0023_convention_date_resiliation"),
        ("conventions", "0024_auto_20220704_0936"),
        ("conventions", "0025_auto_20220708_0254"),
        ("conventions", "0026_auto_20220712_2200"),
        ("conventions", "0027_auto_20220714_1216"),
        ("conventions", "0028_alter_convention_financement"),
        ("conventions", "0029_auto_20220718_1427"),
        ("conventions", "0030_auto_20220719_1436"),
        ("conventions", "0031_alter_convention_avenant_type"),
        ("conventions", "0032_rename_parent_id_convention_parent"),
        ("conventions", "0033_alter_convention_parent"),
        ("conventions", "0034_auto_20220910_1014"),
        ("conventions", "0035_convention_cree_par"),
        ("conventions", "0036_auto_20221006_0553"),
        ("conventions", "0037_avenanttype_remove_convention_avenant_type_and_more"),
        ("conventions", "0038_load_avenant_type"),
        ("conventions", "0039_auto_20221013_0115"),
        ("conventions", "0040_remove_convention_avenant_type_and_more"),
        ("conventions", "0041_alter_convention_avenant_types"),
        ("conventions", "0042_convention_statuts_denoncee_annulee"),
        ("conventions", "0043_remove_bailleur"),
        ("conventions", "0044_alter_convention_lot_and_more"),
        ("conventions", "0045_create_model_pieces_jointes"),
        ("conventions", "0046_create_spf_fields"),
        ("conventions", "0047_convention_gestionnaire_and_more"),
        ("conventions", "0048_convention_attribution_agees_autonomie_and_more"),
        ("conventions", "0049_convention_foyer_variante_1_and_more"),
        ("conventions", "0050_convention_attached"),
        ("conventions", "0051_convention_historique_financement_public"),
        ("conventions", "0052_convention_desc_avenant"),
        ("conventions", "0053_alter_convention_statut_and_more"),
        ("conventions", "0054_convention_attribution_pension_de_famille_and_more"),
        (
            "conventions",
            "0055_rename_foyer_variante_1_convention_foyer_residence_variante_1_and_more",
        ),
        (
            "conventions",
            "0056_convention_foyer_residence_variante_2_nb_annees_and_more",
        ),
        (
            "conventions",
            "0057_rename_attribution_reservation_prefectoral_convention_attribution_reservation_prefectorale",
        ),
        ("conventions", "0058_piece_jointe_max_lengths"),
        ("conventions", "0059_rename_comments_convention_commentaires"),
        (
            "conventions",
            "0060_convention_gestionnaire_signataire_bloc_signature_and_more",
        ),
        ("conventions", "0061_evenement"),
        ("conventions", "0062_alter_convention_statut_and_more"),
        ("conventions", "0063_alter_evenement_type_evenement"),
        (
            "conventions",
            "0064_alter_convention_uuid_convention_convention_uuid_idx_and_more",
        ),
        ("conventions", "0065_convention_convention_statut_idx"),
        ("conventions", "0066_alter_evenement_type_evenement"),
        ("conventions", "0067_convention_unique_display_name"),
        ("conventions", "0068_convention_champ_libre_avenant"),
        ("conventions", "0069_add_data_avenanttype"),
        ("conventions", "0070_auto_20230725_1842"),
        ("conventions", "0071_convention_date_denonciation_and_more"),
        (
            "conventions",
            "0072_alter_convention_televersement_convention_signee_le_and_more",
        ),
        ("conventions", "0073_alter_convention_financement_alter_pret_preteur"),
        ("conventions", "0074_convention_adresse_convention_code_postal_and_more"),
        ("conventions", "0075_remove_convention_code_postal_and_more"),
        ("conventions", "0076_alter_convention_avenant_types_and_more"),
        ("conventions", "0077_trigram_extensions"),
        ("conventions", "0078_auto_20240115_1612"),
        ("conventions", "0079_convention_fichier_instruction_resiliation_and_more"),
        ("conventions", "0080_convention_convention_tele_signee_le_idx"),
        ("conventions", "0081_convention_gestionnaire_bloc_info_complementaire"),
        (
            "conventions",
            "0082_alter_convention_attribution_inclusif_activites_and_more",
        ),
        ("conventions", "0083_convention_fichier_override_cerfa"),
    ]

    dependencies = [
        (
            "programmes",
            "0001_initial_squashed_0091_programme_reassign_command_old_admin_backup",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AvenantType",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("nom", models.CharField(max_length=255, unique=True)),
                ("desc", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Convention",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("numero", models.CharField(blank=True, max_length=255, null=True)),
                ("date_fin_conventionnement", models.DateField(blank=True, null=True)),
                (
                    "financement",
                    models.CharField(
                        choices=[
                            ("PLUS", "PLUS"),
                            ("PLUS_CD", "PLUS_CD"),
                            ("PLAI", "PLAI"),
                            ("PLAI_ADP", "PLAI_ADP"),
                            ("PLUS-PLAI", "PLUS-PLAI"),
                            ("PLS", "PLS"),
                            ("PSH", "PSH"),
                            ("PALULOS", "PALULOS"),
                            ("SANS_FINANCEMENT", "Sans Financement"),
                        ],
                        default="PLUS",
                        max_length=25,
                    ),
                ),
                ("fond_propre", models.FloatField(blank=True, null=True)),
                ("commentaires", models.TextField(blank=True, null=True)),
                ("attached", models.TextField(blank=True, null=True)),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("PROJET", "1. Projet"),
                            ("INSTRUCTION", "2. Instruction requise"),
                            ("CORRECTION", "3. Corrections requises"),
                            ("A_SIGNER", "4. A signer"),
                            ("SIGNEE", "5. Signée"),
                            ("RESILIEE", "6. Résiliée"),
                            ("DENONCEE", "7. Dénoncée"),
                            ("ANNULEE", "8. Annulée en suivi"),
                        ],
                        default="1. Projet",
                        max_length=25,
                    ),
                ),
                ("soumis_le", models.DateTimeField(blank=True, null=True)),
                ("premiere_soumission_le", models.DateTimeField(blank=True, null=True)),
                ("valide_le", models.DateField(blank=True, null=True)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "type1and2",
                    models.CharField(
                        blank=True,
                        choices=[("Type1", "Type I"), ("Type2", "Type II")],
                        max_length=25,
                        null=True,
                    ),
                ),
                ("type2_lgts_concernes_option1", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option2", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option3", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option4", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option5", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option6", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option7", models.BooleanField(default=True)),
                ("type2_lgts_concernes_option8", models.BooleanField(default=True)),
                (
                    "signataire_nom",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "signataire_fonction",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "signataire_date_deliberation",
                    models.DateField(blank=True, null=True),
                ),
                (
                    "signataire_bloc_signature",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("date_publication_spf", models.DateField(null=True)),
                ("reference_spf", models.CharField(max_length=50, null=True)),
                ("date_envoi_spf", models.DateField(null=True)),
                ("date_refus_spf", models.DateField(null=True)),
                ("motif_refus_spf", models.CharField(max_length=1000, null=True)),
                (
                    "gestionnaire",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "gestionnaire_signataire_nom",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "gestionnaire_signataire_fonction",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "gestionnaire_signataire_date_deliberation",
                    models.DateField(blank=True, null=True),
                ),
                (
                    "gestionnaire_signataire_bloc_signature",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "gestionnaire_bloc_info_complementaire",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("donnees_validees", models.TextField(blank=True, null=True)),
                (
                    "nom_fichier_signe",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "televersement_convention_signee_le",
                    models.DateField(blank=True, null=True),
                ),
                ("desc_avenant", models.TextField(blank=True, null=True)),
                (
                    "historique_financement_public",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                ("attribution_agees_autonomie", models.BooleanField(default=False)),
                ("attribution_agees_ephad", models.BooleanField(default=False)),
                ("attribution_agees_desorientees", models.BooleanField(default=False)),
                ("attribution_agees_petite_unite", models.BooleanField(default=False)),
                ("attribution_agees_autre", models.BooleanField(default=False)),
                (
                    "attribution_agees_autre_detail",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("attribution_handicapes_foyer", models.BooleanField(default=False)),
                (
                    "attribution_handicapes_foyer_de_vie",
                    models.BooleanField(default=False),
                ),
                (
                    "attribution_handicapes_foyer_medicalise",
                    models.BooleanField(default=False),
                ),
                ("attribution_handicapes_autre", models.BooleanField(default=False)),
                (
                    "attribution_handicapes_autre_detail",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "attribution_inclusif_conditions_specifiques",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_inclusif_conditions_admission",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_inclusif_modalites_attribution",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_inclusif_partenariats",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_inclusif_activites",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_reservation_prefectorale",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "attribution_modalites_reservations",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_modalites_choix_personnes",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_prestations_integrees",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                (
                    "attribution_prestations_facultatives",
                    models.CharField(blank=True, max_length=50000, null=True),
                ),
                ("foyer_residence_variante_1", models.BooleanField(default=True)),
                ("foyer_residence_variante_2", models.BooleanField(default=True)),
                (
                    "foyer_residence_variante_2_travaux",
                    models.CharField(blank=True, max_length=5000, null=True),
                ),
                (
                    "foyer_residence_variante_2_nb_annees",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "foyer_residence_variante_2_nb_tranches",
                    models.IntegerField(blank=True, null=True),
                ),
                ("foyer_residence_variante_3", models.BooleanField(default=True)),
                (
                    "attribution_residence_sociale_ordinaire",
                    models.BooleanField(default=False),
                ),
                ("attribution_pension_de_famille", models.BooleanField(default=False)),
                ("attribution_residence_accueil", models.BooleanField(default=False)),
                ("champ_libre_avenant", models.TextField(blank=True, null=True)),
                ("date_denonciation", models.DateField(blank=True, null=True)),
                ("motif_denonciation", models.TextField(blank=True, null=True)),
                (
                    "fichier_instruction_denonciation",
                    models.TextField(blank=True, null=True),
                ),
                ("date_resiliation", models.DateField(blank=True, null=True)),
                ("motif_resiliation", models.TextField(blank=True, null=True)),
                (
                    "fichier_instruction_resiliation",
                    models.TextField(blank=True, null=True),
                ),
                ("adresse", models.TextField(blank=True, null=True)),
                ("fichier_override_cerfa", models.TextField(blank=True, null=True)),
                (
                    "avenant_types",
                    models.ManyToManyField(
                        blank=True,
                        max_length=50,
                        related_name="conventions",
                        to="conventions.avenanttype",
                        verbose_name="Type d'avenant",
                    ),
                ),
                (
                    "cree_par",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conventions",
                        to="programmes.lot",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avenants",
                        to="conventions.convention",
                    ),
                ),
                (
                    "programme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conventions",
                        to="programmes.programme",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Pret",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "preteur",
                    models.CharField(
                        choices=[
                            ("ETAT", "Etat"),
                            ("EPCI", "EPCI"),
                            ("REGION", "Région"),
                            ("VILLE", "Ville"),
                            ("CDCF", "CDC pour le foncier"),
                            ("CDCL", "CDC pour le logement"),
                            ("COMMUNE", "Commune et action logement"),
                            ("ANRU", "ANRU"),
                            ("AUTRE", "Autre/Subventions"),
                        ],
                        default="AUTRE",
                        max_length=25,
                    ),
                ),
                ("autre", models.CharField(blank=True, max_length=255, null=True)),
                ("date_octroi", models.DateField(blank=True, null=True)),
                ("numero", models.CharField(blank=True, max_length=255, null=True)),
                ("duree", models.IntegerField(blank=True, null=True)),
                ("montant", models.DecimalField(decimal_places=2, max_digits=12)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "convention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prets",
                        to="conventions.convention",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PieceJointe",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("CONVENTION", "Convention APL"),
                            (
                                "RECTIFICATION",
                                "Demande de rectification(s) du bureau des hypothèques",
                            ),
                            ("ATTESTATION_PREFECTORALE", "Attestations préfectorales"),
                            ("AVENANT", "Avenant"),
                            ("PHOTO", "Photographie du bâti ou des logements"),
                            ("AUTRE", "Autre"),
                        ],
                        default="AUTRE",
                        max_length=24,
                        null=True,
                    ),
                ),
                ("fichier", models.CharField(blank=True, max_length=50, null=True)),
                ("nom_reel", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("cree_le", models.DateTimeField()),
                (
                    "convention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pieces_jointes",
                        to="conventions.convention",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Evenement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "type_evenement",
                    models.CharField(
                        choices=[
                            (
                                "DEPOT_BAILLEUR",
                                "Dépôt de la convention APL par le bailleur",
                            ),
                            (
                                "MODIFICATION",
                                "Modification de la convention (valeur du loyer plafond, surface,clauses, etc...)",
                            ),
                            (
                                "ECHANGE",
                                "Echanges téléphoniques, électroniques ou transmission par courrierde la convention APL au bailleur",
                            ),
                            (
                                "ENVOI_PREFET",
                                "Transmission de la convention APL à la signature du préfet",
                            ),
                            (
                                "RETOUR_PREFET",
                                "Retour de la convention APL signée par le préfet",
                            ),
                            (
                                "ENVOI_HYPOTHEQUE",
                                "Transmission de la convention APL au bureau des hypothèques ou aulivre foncier",
                            ),
                            (
                                "RETOUR_HYPOTHEQUE",
                                "Retour du bureau des hypothèques ou au livre foncier, pour modification",
                            ),
                            (
                                "ENVOI_RECTIFICATIF_PREFET",
                                "Transmission de l'attestation rectificative à la signature du préfet",
                            ),
                            (
                                "RETOUR_RECTIFICATIF_PREFET",
                                "Retour de l'attestation préfectorale de la convention APL",
                            ),
                            (
                                "PUBLICATION_HYPOTHEQUE",
                                "Publication de la convention APL au bureau des hypothèques",
                            ),
                            ("ENVOI_CAF", "Transmission de la convention APL à la CAF"),
                            ("DEPOT_AVENANT", "Dépôt d'un avenant par le bailleur"),
                            (
                                "INSTRUCTION_AVENANT",
                                "Instruction d'un avenant, objet de l'avenant, etc...",
                            ),
                            (
                                "CORRECTION_AVENANT",
                                "Modification de l'avenant sur demande de l'instructeur auprès du bailleur",
                            ),
                            (
                                "ENVOI_AVENANT_PREFET",
                                "Transmission de l'avenant à la signature du préfet",
                            ),
                            (
                                "SIGNATURE_AVENANT_PREFET",
                                "Retour de l'avenant signé par le préfet",
                            ),
                            (
                                "ENVOI_AVENANT_HYPOTHEQUE",
                                "Transmission de l'avenant au bureau des hypothèques ou au livre foncier",
                            ),
                            (
                                "RETOUR_AVENANT_HYPOTHEQUE",
                                "Retour de l'avenant du bureau des hypothèques ou du livre foncier,pour modification",
                            ),
                            (
                                "ENVOI_RECTIFICATIF_AVENANT_PREFET",
                                "Transmission de l'attestation rectificative d'avenant à la signaturedu préfet",
                            ),
                            (
                                "RETOUR_RECTIFICATIF_AVENANT_PREFET",
                                "Retour de l'attestation préfectorale de l'avenant",
                            ),
                            (
                                "PUBLICATION_AVENANT_HYPOTHEQUE",
                                "Publication de l'avenant de la convention APL au bureau des hypothèques",
                            ),
                            (
                                "EXPIRATION_CONVENTION",
                                "Expiration de la convention APL",
                            ),
                            (
                                "ENVOI_FIN_DENONCIATION",
                                "Information auprès du bailleur de la date butoir de dénonciation dela convention APL",
                            ),
                            ("AUTRE", "Autres"),
                        ],
                        default="DEPOT_BAILLEUR",
                        max_length=50,
                    ),
                ),
                ("survenu_le", models.DateField(editable=False)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "convention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evenements",
                        to="conventions.convention",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConventionHistory",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "statut_convention",
                    models.CharField(
                        choices=[
                            ("PROJET", "1. Projet"),
                            ("INSTRUCTION", "2. Instruction requise"),
                            ("CORRECTION", "3. Corrections requises"),
                            ("A_SIGNER", "4. A signer"),
                            ("SIGNEE", "5. Signée"),
                            ("RESILIEE", "6. Résiliée"),
                            ("DENONCEE", "7. Dénoncée"),
                            ("ANNULEE", "8. Annulée en suivi"),
                        ],
                        default="1. Projet",
                        max_length=25,
                    ),
                ),
                (
                    "statut_convention_precedent",
                    models.CharField(
                        choices=[
                            ("PROJET", "1. Projet"),
                            ("INSTRUCTION", "2. Instruction requise"),
                            ("CORRECTION", "3. Corrections requises"),
                            ("A_SIGNER", "4. A signer"),
                            ("SIGNEE", "5. Signée"),
                            ("RESILIEE", "6. Résiliée"),
                            ("DENONCEE", "7. Dénoncée"),
                            ("ANNULEE", "8. Annulée en suivi"),
                        ],
                        default="1. Projet",
                        max_length=25,
                    ),
                ),
                ("commentaire", models.TextField(blank=True, null=True)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "convention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conventionhistories",
                        to="conventions.convention",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="valide_par",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="avenanttype",
            index=models.Index(fields=["nom"], name="avenant_type_nom_idx"),
        ),
        migrations.AddIndex(
            model_name="convention",
            index=models.Index(fields=["numero"], name="convention_numero_idx"),
        ),
        migrations.AddIndex(
            model_name="convention",
            index=models.Index(fields=["statut"], name="convention_statut_idx"),
        ),
        migrations.AddIndex(
            model_name="convention",
            index=models.Index(fields=["uuid"], name="convention_uuid_idx"),
        ),
        migrations.AddIndex(
            model_name="convention",
            index=models.Index(fields=["valide_le"], name="convention_valid_le_idx"),
        ),
        migrations.AddIndex(
            model_name="convention",
            index=models.Index(
                fields=["televersement_convention_signee_le"],
                name="convention_tele_signee_le_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="convention",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    (
                        "statut__in",
                        [
                            "1. Projet",
                            "2. Instruction requise",
                            "3. Corrections requises",
                            "4. A signer",
                            "5. Signée",
                        ],
                    )
                ),
                fields=("programme_id", "lot_id", "financement"),
                name="unique_display_name",
            ),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
    ]
