# Generated by Django 5.1 on 2024-09-11 08:35

import json
import logging
from typing import Any

from django.db import migrations

logger = logging.getLogger(__name__)


def _update_instance_field(instance: Any, field_name: str):
    field = getattr(instance, field_name)
    if not field:
        return

    try:
        json_content = json.loads(field)
    except json.JSONDecodeError:
        logger.error(f"Failed to decode JSON content for {instance} field {field_name}")
        return

    if "files" not in json_content:
        logger.error(
            f"JSON content for {instance} field {field_name} does not contain 'files' key"
        )
        return
    if not isinstance(json_content["files"], dict):
        logger.error(
            f"JSON content for {instance} field {field_name} 'files' key is not a dict"
        )
        return

    for v in json_content["files"].values():
        v.update({"realname": v["filename"]})

    setattr(instance, field_name, json.dumps(json_content))
    instance.save()


def migrate_text_and_files_fields(apps, schema_editor):
    Convention = apps.get_model("conventions", "Convention")
    Lot = apps.get_model("programmes", "Lot")
    Programme = apps.get_model("programmes", "Programme")

    for programme in Programme.objects.all():
        for field in (
            "acquereur",
            "acte_de_propriete",
            "certificat_adressage",
            "edd_stationnements",
            "effet_relatif",
            "reference_cadastrale",
            "reference_notaire",
            "reference_publication_acte",
            "vendeur",
        ):
            _update_instance_field(instance=programme, field_name=field)

    for convention in Convention.objects.all():
        for field in (
            "attached",
            "commentaires",
            "fichier_instruction_denonciation",
            "fichier_instruction_resiliation",
            "fichier_override_cerfa",
        ):
            _update_instance_field(instance=convention, field_name=field)

    for lot in Lot.objects.all():
        for field in (
            "edd_classique",
            "edd_volumetrique",
        ):
            _update_instance_field(instance=lot, field_name=field)

    # FIXME: for dev purpose only
    assert False


class Migration(migrations.Migration):
    dependencies = [
        ("upload", "0008_alter_uploadedfile_filename_and_more"),
    ]

    operations = [
        migrations.RunPython(
            code=migrate_text_and_files_fields,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
