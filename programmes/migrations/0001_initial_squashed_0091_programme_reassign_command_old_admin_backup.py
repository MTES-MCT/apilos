# Generated by Django 4.2.11 on 2024-04-17 12:32

import uuid

import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.contrib.postgres.search
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("programmes", "0001_initial"),
        ("programmes", "0002_auto_20210706_1816"),
        ("programmes", "0003_auto_20210726_1100"),
        ("programmes", "0004_programme_departement"),
        ("programmes", "0005_programme_administration"),
        ("programmes", "0006_alter_programme_administration"),
        ("programmes", "0007_alter_programme_administration"),
        ("programmes", "0008_rename_numero_gallion_programme_numero_galion"),
        ("programmes", "0009_alter_lot_financement"),
        ("programmes", "0010_alter_programme_type_operation"),
        ("programmes", "0011_auto_20210830_0947"),
        ("programmes", "0012_auto_20210902_1538"),
        ("programmes", "0013_auto_20210903_1607"),
        ("programmes", "0014_remove_lot_volumes"),
        ("programmes", "0015_auto_20210913_1442"),
        ("programmes", "0016_remove_referencecadastrale_nom"),
        ("programmes", "0017_auto_20210914_1644"),
        ("programmes", "0018_alter_referencecadastrale_surface"),
        ("programmes", "0019_auto_20210922_1417"),
        ("programmes", "0020_alter_typestationnement_typologie"),
        ("programmes", "0021_auto_20210927_0853"),
        ("programmes", "0022_auto_20211005_0921"),
        ("programmes", "0023_auto_20211007_1201"),
        ("programmes", "0024_programme_reference_cadastrale"),
        ("programmes", "0025_alter_typestationnement_typologie"),
        ("programmes", "0026_auto_20211202_1232"),
        ("programmes", "0027_auto_20211214_0830"),
        (
            "programmes",
            "0028_rename_autre_locaux_hors_convention_programme_autres_locaux_hors_convention",
        ),
        ("programmes", "0029_alter_typestationnement_typologie"),
        ("programmes", "0030_alter_programme_type_habitat"),
        ("programmes", "0031_auto_20220107_1634"),
        ("programmes", "0032_programme_date_achevement_compile"),
        ("programmes", "0033_auto_20220119_0959"),
        ("programmes", "0034_auto_20220119_1150"),
        ("programmes", "0035_auto_20220207_1248"),
        ("programmes", "0036_auto_20220215_1757"),
        ("programmes", "0037_lot_type_habitat"),
        ("programmes", "0038_remove_programme_type_habitat"),
        ("programmes", "0039_alter_programme_adresse"),
        ("programmes", "0040_rename_acte_notarial_programme_certificat_adressage"),
        ("programmes", "0041_lot_lgts_mixite_sociale_negocies"),
        ("programmes", "0042_lot_loyer_derogatoire"),
        ("programmes", "0043_programme_effet_relatif"),
        ("programmes", "0044_auto_20220511_1629"),
        ("programmes", "0045_alter_typestationnement_typologie"),
        ("programmes", "0046_auto_20220627_1521"),
        ("programmes", "0047_alter_lot_financement"),
        ("programmes", "0048_auto_20220712_2200"),
        ("programmes", "0049_auto_20220714_1216"),
        ("programmes", "0050_auto_20220715_1056"),
        ("programmes", "0051_alter_typestationnement_typologie"),
        ("programmes", "0052_auto_20220722_0627"),
        ("programmes", "0053_alter_logement_typologie"),
        ("programmes", "0054_remove_bailleur"),
        ("programmes", "0055_alter_logementedd_financement"),
        ("programmes", "0056_alter_logementedd_programme_alter_lot_programme_and_more"),
        ("programmes", "0057_alter_programme_nature_logement"),
        (
            "programmes",
            "0058_programme_date_autorisation_hors_habitat_inclusif_and_more",
        ),
        ("programmes", "0059_lot_surface_habitable_totale_and_more"),
        ("programmes", "0060_lot_foyer_residence_dependance_and_more"),
        ("programmes", "0061_alter_locauxcollectifs_type_local"),
        ("programmes", "0062_alter_annexe_typologie"),
        ("programmes", "0063_alter_logement_typologie"),
        ("programmes", "0064_programme_date_residence_agrement_and_more"),
        (
            "programmes",
            "0065_programme_ville_signature_residence_argement_gestionnaire_intermediation",
        ),
        ("programmes", "0066_add_logement_surface_corrigee"),
        (
            "programmes",
            "0067_alter_programme_adresse_alter_programme_code_postal_and_more",
        ),
        ("programmes", "0068_alter_logement_loyer_par_metre_carre_and_more"),
        ("programmes", "0069_alter_logement_coeficient_alter_logement_loyer"),
        ("programmes", "0070_create_model_indiceevolutionloyer"),
        ("programmes", "0071_extend_logement_max_digits"),
        (
            "programmes",
            "0072_alter_programme_mention_publication_edd_classique_and_more",
        ),
        ("programmes", "0073_lot_surface_locaux_collectifs_residentiels"),
        ("programmes", "0074_programme_surface_corrigee_totale_and_more"),
        ("programmes", "0075_alter_lot_surface_locaux_collectifs_residentiels"),
        ("programmes", "0076_loyers_indices_over_periods"),
        ("programmes", "0077_auto_20230515_1912"),
        ("programmes", "0078_programme_programmes__date_ac_4ced67_idx"),
        ("programmes", "0079_deduplication_programmes_ecolo"),
        ("programmes", "0080_auto_20230729_1005"),
        ("programmes", "0081_remove_programme_date_residence_agrement_and_more"),
        ("programmes", "0082_programme_add_indexes"),
        ("programmes", "0083_alter_logementedd_financement_alter_lot_financement"),
        ("programmes", "0084_programme_edd_stationnements"),
        ("programmes", "0085_programme_search_vector_ville_idx"),
        ("programmes", "0086_btree_gin_extension"),
        ("programmes", "0087_programme_search_vector"),
        ("programmes", "0088_programme_search_vector_trigger"),
        ("programmes", "0089_indiceevolutionloyer_departements"),
        ("programmes", "0090_programme_search_vector_update"),
        ("programmes", "0091_programme_reassign_command_old_admin_backup"),
    ]

    dependencies = [
        ("bailleurs", "0003_alter_bailleur_options"),
        ("apilos_settings", "0005_alter_departement_code_insee_region"),
        ("bailleurs", "0001_initial"),
        ("instructeurs", "0001_initial"),
    ]

    operations = [
        django.contrib.postgres.operations.BtreeGinExtension(),
        migrations.CreateModel(
            name="Programme",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("nom", models.CharField(max_length=255)),
                ("code_postal", models.CharField(blank=True, max_length=5, null=True)),
                ("ville", models.CharField(blank=True, max_length=255, null=True)),
                ("adresse", models.TextField(blank=True, null=True)),
                (
                    "type_operation",
                    models.CharField(
                        choices=[
                            ("SANSOBJET", "Sans Objet"),
                            ("NEUF", "Construction Neuve"),
                            ("VEFA", "Construction Neuve > VEFA"),
                            ("ACQUIS", "Acquisition"),
                            ("ACQUISAMELIORATION", "Acquisition-Amélioration"),
                            ("REHABILITATION", "Réhabilitation"),
                            ("ACQUISSANSTRAVAUX", "Acquisition sans travaux"),
                            ("SANSTRAVAUX", "Sans aide financière (sans travaux)"),
                            ("USUFRUIT", "Usufruit"),
                        ],
                        default="NEUF",
                        max_length=25,
                    ),
                ),
                ("anru", models.BooleanField(default=False)),
                ("nb_locaux_commerciaux", models.IntegerField(null=True)),
                ("nb_bureaux", models.IntegerField(null=True)),
                ("vendeur", models.TextField(null=True)),
                ("acquereur", models.TextField(null=True)),
                ("date_acte_notarie", models.DateField(null=True)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "bailleur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bailleurs.bailleur",
                    ),
                ),
                ("date_achat", models.DateField(null=True)),
                ("date_achevement", models.DateField(null=True)),
                ("date_achevement_previsible", models.DateField(null=True)),
                ("permis_construire", models.CharField(max_length=255, null=True)),
                ("reference_notaire", models.TextField(null=True)),
                ("reference_publication_acte", models.TextField(null=True)),
                ("annee_gestion_programmation", models.IntegerField(null=True)),
                ("numero_galion", models.CharField(max_length=255, null=True)),
                (
                    "surface_utile_totale",
                    models.DecimalField(decimal_places=2, max_digits=10, null=True),
                ),
                (
                    "administration",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="instructeurs.administration",
                    ),
                ),
                ("autres_locaux_hors_convention", models.TextField(null=True)),
                ("acte_de_propriete", models.TextField(null=True)),
                ("edd_volumetrique", models.TextField(max_length=5000, null=True)),
                ("certificat_adressage", models.TextField(null=True)),
                ("edd_classique", models.TextField(max_length=5000, null=True)),
                (
                    "mention_publication_edd_classique",
                    models.TextField(max_length=5000, null=True),
                ),
                (
                    "mention_publication_edd_volumetrique",
                    models.TextField(max_length=5000, null=True),
                ),
                ("reference_cadastrale", models.TextField(null=True)),
                (
                    "zone_123",
                    models.CharField(
                        choices=[
                            ("1", "01"),
                            ("2", "02"),
                            ("3", "03"),
                            ("1bis", "1bis"),
                        ],
                        default=None,
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "zone_abc",
                    models.CharField(
                        choices=[
                            ("A", "A"),
                            ("Abis", "Abis"),
                            ("B1", "B1"),
                            ("B2", "B2"),
                            ("C", "C"),
                        ],
                        default=None,
                        max_length=25,
                        null=True,
                    ),
                ),
                ("date_achevement_compile", models.DateField(null=True)),
                ("effet_relatif", models.TextField(null=True)),
                ("code_insee_commune", models.CharField(max_length=10, null=True)),
                ("code_insee_departement", models.CharField(max_length=10, null=True)),
                ("code_insee_region", models.CharField(max_length=10, null=True)),
                (
                    "nature_logement",
                    models.CharField(
                        choices=[
                            ("LOGEMENTSORDINAIRES", "Logements ordinaires"),
                            ("AUTRE", "Autres logements foyers"),
                            ("HEBERGEMENT", "Hébergement"),
                            ("RESISDENCESOCIALE", "Résidence sociale"),
                            (
                                "PENSIONSDEFAMILLE",
                                "Pensions de famille (Maisons relais)",
                            ),
                            ("RESIDENCEDACCUEIL", "Résidence d'accueil"),
                            ("RESIDENCEUNIVERSITAIRE", "Résidence universitaire"),
                            ("RHVS", "RHVS"),
                        ],
                        default="LOGEMENTSORDINAIRES",
                        max_length=25,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="programmes.programme",
                    ),
                ),
                (
                    "date_autorisation_hors_habitat_inclusif",
                    models.DateField(null=True),
                ),
                ("date_convention_location", models.DateField(null=True)),
                (
                    "date_residence_argement_gestionnaire_intermediation",
                    models.DateField(null=True),
                ),
                (
                    "departement_residence_argement_gestionnaire_intermediation",
                    models.CharField(max_length=255, null=True),
                ),
                (
                    "ville_signature_residence_agrement_gestionnaire_intermediation",
                    models.CharField(max_length=255, null=True),
                ),
                (
                    "surface_corrigee_totale",
                    models.DecimalField(decimal_places=2, max_digits=10, null=True),
                ),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True, null=True
                    ),
                ),
                (
                    "edd_stationnements",
                    models.TextField(blank=True, max_length=5000, null=True),
                ),
                (
                    "reassign_command_old_admin_backup",
                    models.JSONField(default=None, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lot",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "financement",
                    models.CharField(
                        choices=[
                            ("PLUS", "PLUS"),
                            ("PLUS_CD", "PLUS_CD"),
                            ("PLAI", "PLAI"),
                            ("PLAI_ADP", "PLAI_ADP"),
                            ("PLUS-PLAI", "PLUS-PLAI"),
                            ("PLS", "PLS"),
                            ("PSH", "PSH"),
                            ("PALULOS", "PALULOS"),
                            ("SANS_FINANCEMENT", "Sans Financement"),
                        ],
                        default="PLUS",
                        max_length=25,
                    ),
                ),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "programme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lots",
                        to="programmes.programme",
                    ),
                ),
                ("nb_logements", models.IntegerField(null=True)),
                ("annexe_ateliers", models.BooleanField(default=False)),
                ("annexe_balcons", models.BooleanField(default=False)),
                ("annexe_caves", models.BooleanField(default=False)),
                ("annexe_celliers", models.BooleanField(default=False)),
                ("annexe_combles", models.BooleanField(default=False)),
                ("annexe_loggias", models.BooleanField(default=False)),
                ("annexe_remises", models.BooleanField(default=False)),
                ("annexe_resserres", models.BooleanField(default=False)),
                ("annexe_sechoirs", models.BooleanField(default=False)),
                ("annexe_soussols", models.BooleanField(default=False)),
                ("annexe_terrasses", models.BooleanField(default=False)),
                ("edd_classique", models.TextField(max_length=50000, null=True)),
                ("edd_volumetrique", models.TextField(max_length=50000, null=True)),
                (
                    "type_habitat",
                    models.CharField(
                        choices=[
                            ("MIXTE", "Mixte"),
                            ("INDIVIDUEL", "Individuel"),
                            ("COLLECTIF", "Collectif"),
                        ],
                        default="INDIVIDUEL",
                        max_length=25,
                    ),
                ),
                ("lgts_mixite_sociale_negocies", models.IntegerField(default=0)),
                (
                    "loyer_derogatoire",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Loyer dérogatoire",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="programmes.lot",
                    ),
                ),
                (
                    "surface_habitable_totale",
                    models.DecimalField(decimal_places=2, max_digits=12, null=True),
                ),
                (
                    "foyer_residence_dependance",
                    models.TextField(blank=True, max_length=5000, null=True),
                ),
                (
                    "foyer_residence_locaux_hors_convention",
                    models.TextField(blank=True, max_length=5000, null=True),
                ),
                (
                    "foyer_residence_nb_garage_parking",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "surface_locaux_collectifs_residentiels",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        max_digits=12,
                        verbose_name="Surface des locaux collectifs résidentiels",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Logement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "designation",
                    models.CharField(
                        max_length=255, verbose_name="Désignation des logements"
                    ),
                ),
                (
                    "typologie",
                    models.CharField(
                        choices=[
                            ("T1", "T1"),
                            ("T1bis", "T1 bis"),
                            ("T1prime", "T1'"),
                            ("T2", "T2"),
                            ("T3", "T3"),
                            ("T4", "T4"),
                            ("T5", "T5"),
                            ("T6", "T6"),
                            ("T7", "T7"),
                        ],
                        default="T1",
                        max_length=25,
                    ),
                ),
                (
                    "surface_habitable",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Surface habitable",
                    ),
                ),
                (
                    "surface_annexes",
                    models.DecimalField(decimal_places=2, max_digits=12, null=True),
                ),
                (
                    "surface_annexes_retenue",
                    models.DecimalField(decimal_places=2, max_digits=12, null=True),
                ),
                (
                    "surface_utile",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Surface utile",
                    ),
                ),
                (
                    "loyer_par_metre_carre",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Loyer maximum en € par m² de surface utile",
                    ),
                ),
                (
                    "coeficient",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=12,
                        null=True,
                        verbose_name="Coefficient propre au logement",
                    ),
                ),
                (
                    "loyer",
                    models.DecimalField(decimal_places=2, max_digits=12, null=True),
                ),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logements",
                        to="programmes.lot",
                    ),
                ),
                (
                    "surface_corrigee",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Surface corrigée",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TypeStationnement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "typologie",
                    models.CharField(
                        choices=[
                            ("GARAGE_AERIEN", "Garage aérien"),
                            ("GARAGE_ENTERRE", "Garage enterré"),
                            ("PLACE_STATIONNEMENT", "Place de stationnement"),
                            (
                                "PARKING_EXTERIEUR_PRIVATIF",
                                "Parking extérieur privatif",
                            ),
                            (
                                "PARKING_SOUSSOL",
                                "Parking en sous-sol ou en superstructure",
                            ),
                            ("GARAGE_BOXE_SIMPLE", "Garage boxé simple"),
                            ("GARAGE_BOXE_DOUBLE", "Garage boxé double"),
                            ("EXTERIEUR_BOXE", "extérieur boxé"),
                            ("SOUSSOL_BOXE", "en sous-sol boxé"),
                            ("CARPORT", "Carport"),
                            ("DEUX_ROUES_EXTERIEUR", "2 roues en extérieur"),
                            ("DEUX_ROUES_SOUSSOL", "2 roues en sous-sol"),
                            ("DOUBLE_SOUSSOL", "Parking double en sous-sol"),
                            (
                                "DOUBLE_SUPERSTRUCTURE",
                                "Parking double en superstructure",
                            ),
                        ],
                        default="PLACE_STATIONNEMENT",
                        max_length=35,
                    ),
                ),
                ("nb_stationnements", models.IntegerField()),
                ("loyer", models.DecimalField(decimal_places=2, max_digits=6)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="type_stationnements",
                        to="programmes.lot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReferenceCadastrale",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("section", models.CharField(max_length=255, null=True)),
                ("numero", models.IntegerField(null=True)),
                ("lieudit", models.CharField(max_length=255, null=True)),
                ("surface", models.CharField(max_length=255, null=True)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "programme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="referencecadastrales",
                        to="programmes.programme",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LocauxCollectifs",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("type_local", models.CharField(max_length=255)),
                (
                    "surface_habitable",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                ("nombre", models.IntegerField()),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locaux_collectifs",
                        to="programmes.lot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Annexe",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "typologie",
                    models.CharField(
                        choices=[
                            ("TERRASSE", "Terrasse"),
                            ("JARDIN", "Jardin"),
                            ("COUR", "Cour"),
                        ],
                        default="TERRASSE",
                        max_length=25,
                    ),
                ),
                (
                    "surface_hors_surface_retenue",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                (
                    "loyer_par_metre_carre",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                ("loyer", models.DecimalField(decimal_places=2, max_digits=6)),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "logement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annexes",
                        to="programmes.logement",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepartitionSurface",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "typologie",
                    models.CharField(
                        choices=[
                            ("T1", "T1"),
                            ("T1bis", "T1 bis"),
                            ("T1prime", "T1'"),
                            ("T2", "T2"),
                            ("T3", "T3"),
                            ("T4", "T4"),
                            ("T5", "T5"),
                            ("T6", "T6"),
                            ("T7", "T7"),
                        ],
                        default="T1",
                        max_length=25,
                    ),
                ),
                (
                    "type_habitat",
                    models.CharField(
                        choices=[
                            ("INDIVIDUEL", "Individuel"),
                            ("COLLECTIF", "Collectif"),
                        ],
                        default="INDIVIDUEL",
                        max_length=25,
                    ),
                ),
                ("quantite", models.IntegerField()),
                (
                    "lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="surfaces",
                        to="programmes.lot",
                    ),
                ),
            ],
            options={
                "unique_together": {("lot", "typologie", "type_habitat")},
            },
        ),
        migrations.CreateModel(
            name="LogementEDD",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("designation", models.CharField(max_length=255)),
                (
                    "financement",
                    models.CharField(
                        choices=[
                            ("PLUS", "PLUS"),
                            ("PLUS_CD", "PLUS_CD"),
                            ("PLAI", "PLAI"),
                            ("PLS", "PLS"),
                            ("SANS_FINANCEMENT", "Sans Financement"),
                        ],
                        default="PLUS",
                        max_length=25,
                    ),
                ),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                ("mis_a_jour_le", models.DateTimeField(auto_now=True)),
                (
                    "programme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logementedds",
                        to="programmes.programme",
                    ),
                ),
                ("numero_lot", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="IndiceEvolutionLoyer",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("is_loyer", models.BooleanField(default=True)),
                ("annee", models.IntegerField()),
                (
                    "nature_logement",
                    models.TextField(
                        choices=[
                            ("LOGEMENTSORDINAIRES", "Logements ordinaires"),
                            ("AUTRE", "Autres logements foyers"),
                            ("HEBERGEMENT", "Hébergement"),
                            ("RESISDENCESOCIALE", "Résidence sociale"),
                            (
                                "PENSIONSDEFAMILLE",
                                "Pensions de famille (Maisons relais)",
                            ),
                            ("RESIDENCEDACCUEIL", "Résidence d'accueil"),
                            ("RESIDENCEUNIVERSITAIRE", "Résidence universitaire"),
                            ("RHVS", "RHVS"),
                        ],
                        default="LOGEMENTSORDINAIRES",
                        null=True,
                    ),
                ),
                ("evolution", models.FloatField()),
                ("date_debut", models.DateField()),
                ("date_fin", models.DateField()),
                (
                    "departements",
                    models.ManyToManyField(
                        blank=True,
                        related_name="departements",
                        to="apilos_settings.departement",
                        verbose_name="Départements concernés",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["annee", "is_loyer", "nature_logement"],
                        name="idx_annee_and_type",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="programme",
            index=models.Index(
                fields=["-date_achevement_compile"],
                name="programmes__date_ac_4ced67_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="programme",
            index=models.Index(
                fields=["numero_galion"], name="programme_numero_galion_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="programme",
            index=models.Index(fields=["ville"], name="programme_ville_idx"),
        ),
        migrations.AddIndex(
            model_name="programme",
            index=models.Index(
                fields=["code_postal"], name="programme_code_postal_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="programme",
            index=models.Index(fields=["nom"], name="programme_nom_idx"),
        ),
        migrations.AddIndex(
            model_name="programme",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="search_vector_programme_idx"
            ),
        ),
        migrations.RunSQL(
            sql="""
            DROP TRIGGER IF EXISTS search_vector_trigger_programme ON programmes_programme;
            DROP FUNCTION IF EXISTS search_vector_programme_func;\n
            CREATE TRIGGER search_vector_trigger_programme
            BEFORE INSERT OR UPDATE OF nom
            ON programmes_programme
            FOR EACH ROW EXECUTE PROCEDURE
            tsvector_update_trigger(
                search_vector, 'pg_catalog.french', nom
            );\n
            UPDATE programmes_programme SET search_vector = NULL;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS search_vector_trigger_programme ON programmes_programme;
            DROP FUNCTION IF EXISTS search_vector_programme_func;
            """,
        ),
    ]
