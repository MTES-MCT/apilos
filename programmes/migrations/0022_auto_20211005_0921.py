# Generated by Django 3.2.7 on 2021-10-05 07:21
import json

from django.db import migrations


def update_fields_with_images(apps, schema_editor):

    Programme = apps.get_model("programmes", "Programme")

    for prog in Programme.objects.all():
        # VENDEUR
        field = prog.vendeur
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.vendeur = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # ACQUEREUR
        field = prog.acquereur
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.acquereur = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # REFERENCE NOTAIRE
        field = prog.reference_notaire
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.reference_notaire = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # REFERENCE PUBLICATION ACTE
        field = prog.reference_publication_acte
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.reference_publication_acte = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # ACTE DE PROPRIETE
        field = prog.acte_de_propriete
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.acte_de_propriete = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # ACTE NOTARIAL
        field = prog.acte_notarial
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.acte_notarial = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # EDD VOLUMETRIQUE
        field = prog.edd_volumetrique
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.edd_volumetrique = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        # EDD CLASSIQUE
        field = prog.edd_classique
        if field is not None and field != "":
            try:
                json.loads(field)
            except json.decoder.JSONDecodeError:
                prog.edd_classique = json.dumps(
                    {
                        "files": {},
                        "text": field if isinstance(field, str) else "",
                    }
                )

        prog.save()


def rollback_field_with_images(apps, schema_editor):
    print("rollback")  # noqa: T201

    Programme = apps.get_model("programmes", "Programme")

    for prog in Programme.objects.all():
        # VENDEUR
        field = prog.vendeur
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.vendeur = json_field["text"] if "text" in json_field else ""
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # ACQUEREUR
        field = prog.acquereur
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.acquereur = json_field["text"] if "text" in json_field else ""
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # REFERENCE NOTAIRE
        field = prog.reference_notaire
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.reference_notaire = (
                    json_field["text"] if "text" in json_field else ""
                )
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # REFERENCE PUBLICATION ACTE
        field = prog.reference_publication_acte
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.reference_publication_acte = (
                    json_field["text"] if "text" in json_field else ""
                )
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # ACTE DE PROPRIETE
        field = prog.acte_de_propriete
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.acte_de_propriete = (
                    json_field["text"] if "text" in json_field else ""
                )
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # ACTE NOTARIAL
        field = prog.acte_notarial
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.acte_notarial = json_field["text"] if "text" in json_field else ""
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # EDD VOLUMETRIQUE
        field = prog.edd_volumetrique
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.edd_volumetrique = (
                    json_field["text"] if "text" in json_field else ""
                )
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        # EDD CLASSIQUE
        field = prog.edd_classique
        if field is not None and field != "":
            try:
                json_field = json.loads(field)
                prog.edd_classique = json_field["text"] if "text" in json_field else ""
            except json.decoder.JSONDecodeError:
                print(f"json error : {field}")  # noqa: T201

        prog.save()


class Migration(migrations.Migration):

    dependencies = [
        ("programmes", "0021_auto_20210927_0853"),
    ]

    operations = [
        migrations.RunPython(update_fields_with_images, rollback_field_with_images),
    ]
