# Generated by Django 4.2.1 on 2023-05-23 08:38

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("programmes", "0077_auto_20230515_1912"),
    ]

    operations = [
        # Réaffectation des lots vers le programme restant
        migrations.RunSQL(
            sql="""
with dp as(
    select *
    from (
        select
            er.apilos_id as programme_id,
            first_value(er.apilos_id) over (partition by er.ecolo_convention_id, er.ecolo_convention_numero order by er.financement) as unique_programme_id
        from (
            select
                er.apilos_id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.programme_id <> er.unique_programme_id
)
update programmes_lot
set programme_id = dp.unique_programme_id
from dp
where programmes_lot.programme_id = dp.programme_id
            """,
            reverse_sql="",
        ),
        # Réaffectation des conventions vers le programme restant
        migrations.RunSQL(
            sql="""
with dp as(
    select *
    from (
        select
            er.apilos_id as programme_id,
            first_value(er.apilos_id) over (partition by er.ecolo_convention_id, er.ecolo_convention_numero order by er.financement) as unique_programme_id
        from (
            select
                er.apilos_id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.programme_id <> er.unique_programme_id
)
update conventions_convention
set programme_id = dp.unique_programme_id
from dp
where conventions_convention.programme_id = dp.programme_id
            """,
            reverse_sql="",
        ),
        # Réaffectation des EDDs vers le programme restant
        migrations.RunSQL(
            sql="""
with dp as(
    select *
    from (
        select
            er.apilos_id as programme_id,
            first_value(er.apilos_id) over (partition by er.ecolo_convention_id, er.ecolo_convention_numero order by er.financement) as unique_programme_id
        from (
            select
                er.apilos_id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.programme_id <> er.unique_programme_id
)
update programmes_logementedd
set programme_id = dp.unique_programme_id
from dp
where programmes_logementedd.programme_id = dp.programme_id
            """,
            reverse_sql="",
        ),
        # Réaffectation des références cadastrales vers le programme restant
        migrations.RunSQL(
            sql="""
with dp as(
    select *
    from (
        select
            er.apilos_id as programme_id,
            first_value(er.apilos_id) over (partition by er.ecolo_convention_id, er.ecolo_convention_numero order by er.financement) as unique_programme_id
        from (
            select
                er.apilos_id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.programme_id <> er.unique_programme_id
)
update programmes_referencecadastrale
set programme_id = dp.unique_programme_id
from dp
where programmes_referencecadastrale.programme_id = dp.programme_id
            """,
            reverse_sql="",
        ),
        # Réaffectation du programme parent vers le programme restant
        migrations.RunSQL(
            sql="""
with dp as(
    select *
    from (
        select
            er.apilos_id as programme_id,
            first_value(er.apilos_id) over (partition by er.ecolo_convention_id, er.ecolo_convention_numero order by er.financement) as unique_programme_id
        from (
            select
                er.apilos_id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.programme_id <> er.unique_programme_id
)
update programmes_programme
set parent_id = dp.unique_programme_id
from dp
where parent_id = dp.programme_id
            """,
            reverse_sql="",
        ),
        # Suppression des programmes caduques
        migrations.RunSQL(
            sql="""
delete from programmes_programme
using (
    select *
    from (
        select
            er.apilos_id as programme_id,
            first_value(er.apilos_id) over (partition by er.ecolo_convention_id, er.ecolo_convention_numero order by er.financement) as unique_programme_id
        from (
            select
                er.apilos_id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.programme_id <> er.unique_programme_id
) dp
where programmes_programme.id = dp.programme_id
            """,
            reverse_sql="",
        ),
        # Purge ecolo reférences caduques
        migrations.RunSQL(
            sql="""
delete from ecoloweb_ecoloreference
using (
    select *
    from (
        select
            er.id as ecoloref_id,
            first_value(er.id) over (partition by er.ecolo_convention_id, ecolo_convention_id order by er.financement) as unique_ecoloref_id
        from (
            select
                er.id as id,
                split_part(er.ecolo_id, ':', 1) as ecolo_convention_id,
                split_part(er.ecolo_id, ':', 2) as financement,
                split_part(er.ecolo_id, ':', 3) as ecolo_convention_numero
            from ecoloweb_ecoloreference er
            where apilos_model = 'programmes.Programme'
        ) er
        order by er.ecolo_convention_id, ecolo_convention_id, er.financement
    ) er
    where er.ecoloref_id <> er.unique_ecoloref_id
) dp
where ecoloweb_ecoloreference.id = dp.ecoloref_id
            """,
            reverse_sql="",
        ),
        # Correction des ecolo_id des programmes pour coller avec la refactorisation
        migrations.RunSQL(
            sql="""
update ecoloweb_ecoloreference
set ecolo_id = split_part(ecolo_id, ':', 1)||':'||split_part(ecolo_id, ':', 3)
where
    apilos_model = 'programmes.Programme'
            """,
            reverse_sql="",
        ),
    ]
