{"version":3,"sources":["<no source>","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/component/navigation/style/_legacy.scss","../../../navigation.legacy.css","../../../../../../src/component/navigation/style/scheme/_nav.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/selector/tool/_nest.scss","../../../../../../src/component/navigation/style/scheme/_mega-menu.scss","../../../../../../src/component/navigation/style/scheme/_menu.scss"],"names":[],"mappings":"AAAA;;GAAA,ACcI,2DCHA,mCACE,eCJJ,CDYE,wBACE,QCPJ,CCPE,2BCyBA,aFHF,CCtBG,uDCyBD,aFGF,CGnBA,qEDgBE,wBFSF,CIlCE,iFFkDI,wBFVN,CIxCE,mFFsDI,wBFXN,CGlCA,qBDgBE,sDF6CF,CG7DA,iCDgBE,mCFmDF,CGnEA,gCDgBE,6BFyDF,CKnFA,cH0BE,qBFoFF,CI7GE,oBFkDI,wBFiEN,CInHE,qBFsDI,wBFgEN,CG7GA,2BDgBE,4BFkHF,CAnIF,CFDI,qGCkBG,wCAEG,2BCXR,CCJG,iCCaD,wBAAU,CAAV,aFwBF,CIjDE,uCFkDI,wBFWN,CI7DE,wCFsDI,wBFUN,CGvDA,eDgBE,qBF+DF,CIxFE,qBFkDI,wBF4CN,CI9FE,sBFsDI,wBF2CN,CMlGA,uBJ0BE,8CF8EF,CG9FA,mCDgBE,wBFmGF,CI5HE,yCFkDI,wBFgFN,CIlIE,0CFsDI,wBF+EN,CKrHE,wBHSA,6CFwHF,CAhIF","file":"navigation.legacy.min.css","sourcesContent":[null,"////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Navigation Legacy\n/// @group navigation\n////\n\n@include legacy(ie11) {\n  /**\n  * reset liste à puce\n  */\n  #{ns(mega-menu)},\n  #{ns(menu)} {\n    &__list {\n      list-style: none;\n    }\n  }\n\n  /**\n  * reset margin\n  */\n  #{ns(mega-menu)} {\n    &__category {\n      margin: 0;\n    }\n  }\n}\n\n@include respond-from(lg) {\n  @include legacy(ie11) {\n    /**\n    * Correctif de l'alignement des menus sur la droite\n    */\n    #{ns(nav)}__item {\n      &--align-right {\n        #{ns(collapse)} {\n          transform: translateX(-100%);\n        }\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n  * reset liste à puce\n  */\n  .fr-mega-menu__list,\n  .fr-menu__list {\n    list-style: none;\n  }\n  /**\n  * reset margin\n  */\n  .fr-mega-menu__category {\n    margin: 0;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  /**\n    * Correctif de l'alignement des menus sur la droite\n    */\n  .fr-nav__item--align-right .fr-collapse {\n    transform: translateX(-100%);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__link, .fr-nav__btn {\n    color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__link[aria-current], .fr-nav__btn[aria-current] {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__link[aria-current]::before, .fr-nav__btn[aria-current]::before {\n    background-color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__link[aria-current]::before:hover, .fr-nav__btn[aria-current]::before:hover {\n    background-color: #1212ff;\n  }\n  .fr-nav__link[aria-current]::before:active, .fr-nav__btn[aria-current]::before:active {\n    background-color: #2323ff;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-nav__btn[aria-expanded=\"true\"] {\n    color: #000091;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-nav__btn[aria-expanded=\"true\"] {\n    background-color: #e3e3fd;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-nav__btn[aria-expanded=\"true\"]:hover {\n    background-color: #c1c1fb;\n  }\n  .fr-nav__btn[aria-expanded=\"true\"]:active {\n    background-color: #adadf9;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__item::before {\n    box-shadow: 0 -1px 0 0 #e5e5e5, inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__item:first-child::before {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-nav__item:last-child::before {\n    box-shadow: 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-menu::after {\n    background-color: #fff;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-menu::after:hover {\n    background-color: #f6f6f6;\n  }\n  .fr-menu::after:active {\n    background-color: #ededed;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-menu .fr-nav__link {\n    box-shadow: 0 calc(-1rem - 1px) 0 -1rem #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-mega-menu {\n    background-color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-mega-menu:hover {\n    background-color: #f6f6f6;\n  }\n  .fr-mega-menu:active {\n    background-color: #ededed;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-mega-menu > .fr-container::before {\n    background-color: #e3e3fd;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-mega-menu > .fr-container::before:hover {\n    background-color: #c1c1fb;\n  }\n  .fr-mega-menu > .fr-container::before:active {\n    background-color: #adadf9;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-mega-menu__list::before {\n    box-shadow: 0 1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-mega-menu__category {\n    box-shadow: 0 calc(1rem + 1px) 0 -1rem #e5e5e5;\n  }\n}\n","////\n/// Navigation Scheme : Nav\n/// @group navigation\n////\n\n@mixin _navigation-scheme-nav($legacy: false) {\n  #{ns(nav)} {\n    &__link,\n    &__btn {\n      @include scheme-element-text-color(action-high grey, (legacy: $legacy));\n\n      &[aria-current] {\n        @include scheme-element-text-color(active blue-france, (legacy: $legacy));\n        @include before {\n          @include scheme-element-bg-color(active blue-france, (legacy: $legacy));\n        }\n      }\n    }\n\n    &__btn {\n      &[aria-expanded=\"true\"] {\n        @include respond-from(lg) {\n          @include scheme-element-text-color(active blue-france, (legacy: $legacy));\n          @include scheme-element-bg-color(open blue-france, (legacy: $legacy));\n        }\n      }\n    }\n\n    @include list-item {\n      @include before {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), top-1-out bottom-1-in);\n      }\n\n      &:first-child {\n        @include before {\n          @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-in);\n        }\n      }\n\n      &:last-child {\n        @include before {\n          @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), top-1-out);\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if $hover and $context == background and length($tokens) == 1 {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: true));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n\n  $value: important(transparent, $important);\n\n  @if $important {\n    $value: #{$value} !important;\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector nest\n/// @group core\n////\n\n@mixin nest($selector: null) {\n  @if $selector {\n    #{$selector} {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Navigation Scheme : Mega menu\n/// @group navigation\n////\n\n@mixin _navigation-scheme-mega-menu($legacy: false) {\n  #{ns(mega-menu)} {\n    @include scheme-element-bg-color(elevated grey, (legacy:$legacy));\n\n    > #{ns(container)} {\n      @include respond-from(lg) {\n        @include before {\n          @include scheme-element-bg-color(open blue-france, (legacy:$legacy));\n        }\n      }\n    }\n\n    &__list {\n      @include before {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-out);\n      }\n    }\n\n    &__category {\n      @include respond-from(lg) {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), 0 calc(4v + 1px) 0 -4v $COLOR);\n      }\n    }\n  }\n}\n","////\n/// Navigation Scheme : Menu\n/// @group navigation\n////\n\n@mixin _navigation-scheme-menu($legacy: false) {\n  #{ns(menu)} {\n    @include respond-from(lg) {\n      @include after {\n        @include scheme-element-bg-color(elevated grey, (legacy: $legacy));\n      }\n\n      #{ns(nav__link)} {\n        @include scheme-element-box-shadow-color(default grey, (legacy: $legacy), 0 calc(-4v - 1px) 0 -4v $COLOR);\n      }\n    }\n  }\n}\n"]}